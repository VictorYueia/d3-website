{"ast":null,"code":"var _jsxFileName = \"/Users/yinjia/Desktop/react-d3/d3-website/src/components/page1/MapChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport us from \"./states-10m.json\"; // 导入美国地理数据\n// import data from \"./data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  country: \"New York\",\n  city: \"New York\",\n  \"CO AQI Value\": 4,\n  coordinates: [-74.0059, 40.7128]\n}, {\n  country: \"United States of America\",\n  city: \"Los Angeles\",\n  \"CO AQI Value\": 2,\n  coordinates: [-118.2437, 34.0522]\n}, {\n  country: \"Russian Federation\",\n  city: \"huston\",\n  \"CO AQI Value\": 6,\n  coordinates: [-95.3698, 29.7604]\n}, {\n  country: \"Russian Federation\",\n  city: \"damfo\",\n  \"CO AQI Value\": 6,\n  coordinates: [-104.9903, 39.7392]\n}];\nfunction USAMap() {\n  _s();\n  const ref = useRef();\n  const width = 700;\n  const height = 500;\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    const projection = d3.geoAlbersUsa().fitSize([width, height], feature(us, us.objects.states));\n    const path = d3.geoPath().projection(projection);\n    svg.append(\"g\").selectAll(\"path\").data(feature(us, us.objects.states).features).join(\"path\").attr(\"d\", path).attr(\"stroke\", \"#000\").attr(\"fill\", \"gray\");\n\n    // 添加城市点\n    svg.selectAll(\"circle\").data(data).enter().append(\"circle\").attr(\"cx\", function (d) {\n      var _projection;\n      return (_projection = projection(d.coordinates)) === null || _projection === void 0 ? void 0 : _projection[0];\n    }).attr(\"cy\", function (d) {\n      var _projection2;\n      return (_projection2 = projection(d.coordinates)) === null || _projection2 === void 0 ? void 0 : _projection2[1];\n    }).attr(\"r\", \"8px\").attr(\"fill\", function (d) {\n      if (d[\"CO AQI Value\"] > 4) {\n        // 如果 CO AQI Value 大于4，填充黄色\n        return \"yellow\";\n      } else {\n        return \"red\";\n      }\n    });\n\n    // 添加城市名称\n    svg.selectAll(\".city-label\").data(data.filter(d => d[\"CO AQI Value\"] > 4)).enter().append(\"text\").attr(\"class\", \"city-label\").attr(\"x\", function (d) {\n      return projection(d.coordinates)[0];\n    }).attr(\"y\", function (d) {\n      return projection(d.coordinates)[1];\n    }).text(function (d) {\n      return d.city;\n    }).attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").attr(\"text-anchor\", \"middle\").attr(\"fill\", \"black\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: ref,\n    style: {\n      width: width,\n      height: height\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 10\n  }, this);\n}\n_s(USAMap, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = USAMap;\nexport default USAMap;\nvar _c;\n$RefreshReg$(_c, \"USAMap\");","map":{"version":3,"names":["React","useEffect","useRef","d3","feature","us","jsxDEV","_jsxDEV","data","country","city","coordinates","USAMap","_s","ref","width","height","svg","select","current","projection","geoAlbersUsa","fitSize","objects","states","path","geoPath","append","selectAll","features","join","attr","enter","d","_projection","_projection2","filter","text","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yinjia/Desktop/react-d3/d3-website/src/components/page1/MapChart.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport us from \"./states-10m.json\"; // 导入美国地理数据\n// import data from \"./data.json\";\n\nconst data = [\n  {\n    country: \"New York\",\n    city: \"New York\",\n    \"CO AQI Value\": 4,\n    coordinates: [-74.0059, 40.7128],\n  },\n  {\n    country: \"United States of America\",\n    city: \"Los Angeles\",\n    \"CO AQI Value\": 2,\n    coordinates: [-118.2437, 34.0522],\n  },\n  {\n    country: \"Russian Federation\",\n    city: \"huston\",\n    \"CO AQI Value\": 6,\n    coordinates: [-95.3698, 29.7604],\n  },\n  {\n    country: \"Russian Federation\",\n    city: \"damfo\",\n    \"CO AQI Value\": 6,\n    coordinates: [-104.9903, 39.7392],\n  },\n];\n\nfunction USAMap() {\n  const ref = useRef();\n  const width = 700;\n  const height = 500;\n\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n\n    const projection = d3\n      .geoAlbersUsa()\n      .fitSize([width, height], feature(us, us.objects.states));\n\n    const path = d3.geoPath().projection(projection);\n\n    svg\n      .append(\"g\")\n      .selectAll(\"path\")\n      .data(feature(us, us.objects.states).features)\n      .join(\"path\")\n      .attr(\"d\", path)\n      .attr(\"stroke\", \"#000\")\n      .attr(\"fill\", \"gray\");\n\n    // 添加城市点\n    svg\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", function (d) {\n        return projection(d.coordinates)?.[0];\n      })\n      .attr(\"cy\", function (d) {\n        return projection(d.coordinates)?.[1];\n      })\n      .attr(\"r\", \"8px\")\n      .attr(\"fill\", function (d) {\n        if (d[\"CO AQI Value\"] > 4) {\n          // 如果 CO AQI Value 大于4，填充黄色\n          return \"yellow\";\n        } else {\n          return \"red\";\n        }\n      });\n\n    // 添加城市名称\n    svg\n      .selectAll(\".city-label\")\n      .data(data.filter((d) => d[\"CO AQI Value\"] > 4))\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"city-label\")\n      .attr(\"x\", function (d) {\n        return projection(d.coordinates)[0];\n      })\n      .attr(\"y\", function (d) {\n        return projection(d.coordinates)[1];\n      })\n      .text(function (d) {\n        return d.city;\n      })\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"fill\", \"black\");\n  }, []);\n\n  return <svg ref={ref} style={{ width: width, height: height }} />;\n}\n\nexport default USAMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}