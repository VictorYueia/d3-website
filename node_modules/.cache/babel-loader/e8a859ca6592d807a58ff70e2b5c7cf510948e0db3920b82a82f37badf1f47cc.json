{"ast":null,"code":"var _jsxFileName = \"/Users/yinjia/Desktop/react-d3/d3-website/src/components/page5/AtMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport us from \"../Data/usa-states-10m.json\";\n// import data from \"../Data/map-aqi-data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  coutry: \"USA\",\n  city: \"Atlanta\",\n  coordinates: [-107.8801, 37.2753]\n}];\nfunction AtMap() {\n  _s();\n  const ref = useRef();\n  const width = 900;\n  const height = 650;\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    svg.selectAll(\"*\").remove(); // render and update\n\n    const projection = d3.geoAlbersUsa().fitSize([width, height], feature(us, us.objects.states));\n    const path = d3.geoPath().projection(projection);\n    svg.append(\"g\").selectAll(\"path\").data(feature(us, us.objects.states).features).join(\"path\").attr(\"d\", path).attr(\"stroke\", \"#000\").attr(\"fill\", \"#BDCDD6\");\n\n    // add city points\n    const circles = svg.selectAll(\"circle\").data(data).enter().append(\"circle\").attr(\"cx\", function (d) {\n      var _projection;\n      return (_projection = projection(d.coordinates)) === null || _projection === void 0 ? void 0 : _projection[0];\n    }).attr(\"cy\", function (d) {\n      var _projection2;\n      return (_projection2 = projection(d.coordinates)) === null || _projection2 === void 0 ? void 0 : _projection2[1];\n    }).attr(\"r\", \"5px\").attr(\"fill\", \"red\").attr(\"stroke\", \"black\") // Add this line to add a border color\n    .attr(\"stroke-width\", \"1px\"); // Add this line to define the border width\n\n    // add city names\n    svg.selectAll(\".city-label\").data(data).enter().append(\"text\").attr(\"class\", \"city-label\").style(\"visibility\", \"hidden\") // Make the labels initially invisible\n    .attr(\"x\", function (d) {\n      return projection(d.coordinates)[0] - 35;\n    }).attr(\"y\", function (d) {\n      return projection(d.coordinates)[1];\n    }).text(function (d) {\n      return d.city;\n    }).attr(\"font-size\", \"15px\").attr(\"font-weight\", \"bold\").attr(\"text-anchor\", \"middle\").attr(\"fill\", \"black\");\n    circles.on(\"mouseover\", function (event, d) {\n      // Show the label of the hovered circle\n      svg.selectAll(\".city-label\").filter(function (d2) {\n        return d2 === d;\n      }).style(\"visibility\", \"visible\");\n    }).on(\"mouseout\", function (event, d) {\n      // Hide the label when not hovering\n      svg.selectAll(\".city-label\").filter(function (d2) {\n        return d2 === d;\n      }).style(\"visibility\", \"hidden\");\n    });\n    svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", height - 10).style(\"text-anchor\", \"middle\").style(\"font-size\", \"18px\").style(\"font-weight\", \"bolder\").text(\"Chart7: The location of Atlanta\");\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: ref,\n    style: {\n      width: width,\n      height: height\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 10\n  }, this);\n}\n_s(AtMap, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = AtMap;\nexport default AtMap;\nvar _c;\n$RefreshReg$(_c, \"AtMap\");","map":{"version":3,"names":["React","useEffect","useRef","d3","feature","us","jsxDEV","_jsxDEV","data","coutry","city","coordinates","AtMap","_s","ref","width","height","svg","select","current","selectAll","remove","projection","geoAlbersUsa","fitSize","objects","states","path","geoPath","append","features","join","attr","circles","enter","d","_projection","_projection2","style","text","on","event","filter","d2","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yinjia/Desktop/react-d3/d3-website/src/components/page5/AtMap.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport us from \"../Data/usa-states-10m.json\";\n// import data from \"../Data/map-aqi-data.json\";\n\nconst data = [\n  {\n    coutry: \"USA\",\n    city: \"Atlanta\",\n    coordinates: [-107.8801, 37.2753],\n  },\n];\n\nfunction AtMap() {\n  const ref = useRef();\n  const width = 900;\n  const height = 650;\n\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    svg.selectAll(\"*\").remove(); // render and update\n\n    const projection = d3\n      .geoAlbersUsa()\n      .fitSize([width, height], feature(us, us.objects.states));\n\n    const path = d3.geoPath().projection(projection);\n\n    svg\n      .append(\"g\")\n      .selectAll(\"path\")\n      .data(feature(us, us.objects.states).features)\n      .join(\"path\")\n      .attr(\"d\", path)\n      .attr(\"stroke\", \"#000\")\n      .attr(\"fill\", \"#BDCDD6\");\n\n    // add city points\n    const circles = svg\n      .selectAll(\"circle\")\n      .data(data)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", function (d) {\n        return projection(d.coordinates)?.[0];\n      })\n      .attr(\"cy\", function (d) {\n        return projection(d.coordinates)?.[1];\n      })\n      .attr(\"r\", \"5px\")\n      .attr(\"fill\", \"red\")\n      .attr(\"stroke\", \"black\") // Add this line to add a border color\n      .attr(\"stroke-width\", \"1px\"); // Add this line to define the border width\n\n    // add city names\n    svg\n      .selectAll(\".city-label\")\n      .data(data)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"city-label\")\n      .style(\"visibility\", \"hidden\") // Make the labels initially invisible\n      .attr(\"x\", function (d) {\n        return projection(d.coordinates)[0] - 35;\n      })\n      .attr(\"y\", function (d) {\n        return projection(d.coordinates)[1];\n      })\n      .text(function (d) {\n        return d.city;\n      })\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"fill\", \"black\");\n\n    circles\n      .on(\"mouseover\", function (event, d) {\n        // Show the label of the hovered circle\n        svg\n          .selectAll(\".city-label\")\n          .filter(function (d2) {\n            return d2 === d;\n          })\n          .style(\"visibility\", \"visible\");\n      })\n      .on(\"mouseout\", function (event, d) {\n        // Hide the label when not hovering\n        svg\n          .selectAll(\".city-label\")\n          .filter(function (d2) {\n            return d2 === d;\n          })\n          .style(\"visibility\", \"hidden\");\n      });\n\n    svg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", height - 10)\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"18px\")\n      .style(\"font-weight\", \"bolder\")\n      .text(\"Chart7: The location of Atlanta\");\n  }, [data]);\n\n  return <svg ref={ref} style={{ width: width, height: height }} />;\n}\n\nexport default AtMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}