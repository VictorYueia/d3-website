{"ast":null,"code":"var _jsxFileName = \"/Users/yinjia/Desktop/react-d3/d3-website/src/components/page5/AtMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport us from \"../Data/usa-states-10m.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  coutry: \"USA\",\n  city: \"Atlanta\",\n  coordinates: [-84.388, 33.749]\n}];\nfunction AtMap() {\n  _s();\n  const ref = useRef();\n  const width = 900;\n  const height = 650;\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    svg.selectAll(\"*\").remove(); // render and update\n\n    // Define a separate color scale for the states\n    const colorScale = d3.scaleOrdinal().domain([\"Georgia\", \"Other\"]).range([\"#FFD700\", \"#BDCDD6\"]);\n    const projection = d3.geoAlbersUsa().fitSize([width, height], feature(us, us.objects.states));\n    const path = d3.geoPath().projection(projection);\n    svg.append(\"g\").selectAll(\"path\").data(feature(us, us.objects.states).features).join(\"path\").attr(\"d\", path).attr(\"stroke\", \"#000\").attr(\"fill\", d => {\n      return d.properties.name === \"Georgia\" ? colorScale(\"Georgia\") : colorScale(\"Other\");\n    });\n\n    // Create a star symbol generator\n    const star = d3.symbol().type(d3.symbolStar).size(100);\n\n    // Add city points as star symbols\n    const stars = svg.selectAll(\".star\").data(data).enter().append(\"path\").attr(\"class\", \"star\").attr(\"d\", star) // use the star generator to create the shape\n    .attr(\"transform\", function (d) {\n      return `translate(${projection(d.coordinates)})`;\n    }).attr(\"fill\", \"red\").attr(\"stroke\", \"black\").attr(\"stroke-width\", \"1px\");\n    svg.selectAll(\".city-label\").data(data).enter().append(\"text\").attr(\"class\", \"city-label\").style(\"visibility\", d => d.city === \"Atlanta\" ? \"visible\" : \"hidden\").attr(\"x\", function (d) {\n      return projection(d.coordinates)[0] + 35;\n    }).attr(\"y\", function (d) {\n      return projection(d.coordinates)[1];\n    }).text(function (d) {\n      return d.city;\n    }).attr(\"font-size\", \"15px\").attr(\"font-weight\", \"bold\").attr(\"text-anchor\", \"middle\").attr(\"fill\", \"black\");\n    circles.on(\"mouseover\", function (event, d) {\n      // Show the label of the hovered circle\n      svg.selectAll(\".city-label\").filter(function (d2) {\n        return d2 === d;\n      }).style(\"visibility\", \"visible\");\n    }).on(\"mouseout\", function (event, d) {\n      // Hide the label when not hovering\n      svg.selectAll(\".city-label\").filter(function (d2) {\n        return d2 === d;\n      }).style(\"visibility\", \"hidden\");\n    });\n    svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", height - 10).style(\"text-anchor\", \"middle\").style(\"font-size\", \"18px\").style(\"font-weight\", \"bolder\").text(\"Chart7: The location of Atlanta\");\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: ref,\n    style: {\n      width: width,\n      height: height\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 10\n  }, this);\n}\n_s(AtMap, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = AtMap;\nexport default AtMap;\nvar _c;\n$RefreshReg$(_c, \"AtMap\");","map":{"version":3,"names":["React","useEffect","useRef","d3","feature","us","jsxDEV","_jsxDEV","data","coutry","city","coordinates","AtMap","_s","ref","width","height","svg","select","current","selectAll","remove","colorScale","scaleOrdinal","domain","range","projection","geoAlbersUsa","fitSize","objects","states","path","geoPath","append","features","join","attr","d","properties","name","star","symbol","type","symbolStar","size","stars","enter","style","text","circles","on","event","filter","d2","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yinjia/Desktop/react-d3/d3-website/src/components/page5/AtMap.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport us from \"../Data/usa-states-10m.json\";\n\nconst data = [\n  {\n    coutry: \"USA\",\n    city: \"Atlanta\",\n    coordinates: [-84.388, 33.749],\n  },\n];\n\nfunction AtMap() {\n  const ref = useRef();\n  const width = 900;\n  const height = 650;\n\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    svg.selectAll(\"*\").remove(); // render and update\n\n    // Define a separate color scale for the states\n    const colorScale = d3\n      .scaleOrdinal()\n      .domain([\"Georgia\", \"Other\"])\n      .range([\"#FFD700\", \"#BDCDD6\"]);\n\n    const projection = d3\n      .geoAlbersUsa()\n      .fitSize([width, height], feature(us, us.objects.states));\n\n    const path = d3.geoPath().projection(projection);\n\n    svg\n      .append(\"g\")\n      .selectAll(\"path\")\n      .data(feature(us, us.objects.states).features)\n      .join(\"path\")\n      .attr(\"d\", path)\n      .attr(\"stroke\", \"#000\")\n      .attr(\"fill\", (d) => {\n        return d.properties.name === \"Georgia\"\n          ? colorScale(\"Georgia\")\n          : colorScale(\"Other\");\n      });\n\n    // Create a star symbol generator\n    const star = d3.symbol().type(d3.symbolStar).size(100);\n\n    // Add city points as star symbols\n    const stars = svg\n      .selectAll(\".star\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"star\")\n      .attr(\"d\", star) // use the star generator to create the shape\n      .attr(\"transform\", function (d) {\n        return `translate(${projection(d.coordinates)})`;\n      })\n      .attr(\"fill\", \"red\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", \"1px\");\n\n    svg\n      .selectAll(\".city-label\")\n      .data(data)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"city-label\")\n      .style(\"visibility\", (d) => (d.city === \"Atlanta\" ? \"visible\" : \"hidden\"))\n      .attr(\"x\", function (d) {\n        return projection(d.coordinates)[0] + 35;\n      })\n      .attr(\"y\", function (d) {\n        return projection(d.coordinates)[1];\n      })\n      .text(function (d) {\n        return d.city;\n      })\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"fill\", \"black\");\n\n    circles\n      .on(\"mouseover\", function (event, d) {\n        // Show the label of the hovered circle\n        svg\n          .selectAll(\".city-label\")\n          .filter(function (d2) {\n            return d2 === d;\n          })\n          .style(\"visibility\", \"visible\");\n      })\n      .on(\"mouseout\", function (event, d) {\n        // Hide the label when not hovering\n        svg\n          .selectAll(\".city-label\")\n          .filter(function (d2) {\n            return d2 === d;\n          })\n          .style(\"visibility\", \"hidden\");\n      });\n\n    svg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", height - 10)\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"18px\")\n      .style(\"font-weight\", \"bolder\")\n      .text(\"Chart7: The location of Atlanta\");\n  }, [data]);\n\n  return <svg ref={ref} style={{ width: width, height: height }} />;\n}\n\nexport default AtMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}