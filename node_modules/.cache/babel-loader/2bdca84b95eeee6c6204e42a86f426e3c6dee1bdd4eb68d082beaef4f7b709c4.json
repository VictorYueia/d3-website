{"ast":null,"code":"import React,{useEffect,useRef}from\"react\";import*as d3 from\"d3\";import{feature}from\"topojson-client\";import us from\"../Data/usa-states-10m.json\";import{jsx as _jsx}from\"react/jsx-runtime\";var data=[{coutry:\"USA\",city:\"Atlanta\",coordinates:[-84.388,33.749]}];function AtMap(){var ref=useRef();var width=900;var height=650;useEffect(function(){var svg=d3.select(ref.current);svg.selectAll(\"*\").remove();// Define a separate color scale for the states\nvar colorScale=d3.scaleOrdinal().domain([\"Georgia\",\"Other\"]).range([\"#FFD700\",\"#BDCDD6\"]);var projection=d3.geoAlbersUsa().fitSize([width,height],feature(us,us.objects.states));var path=d3.geoPath().projection(projection);svg.append(\"g\").selectAll(\"path\").data(feature(us,us.objects.states).features).join(\"path\").attr(\"d\",path).attr(\"stroke\",\"#000\").attr(\"fill\",function(d){return d.properties.name===\"Georgia\"?colorScale(\"Georgia\"):colorScale(\"Other\");});// Create a star symbol generator\nvar star=d3.symbol().type(d3.symbolStar).size(100);// Add city points as star symbols\nvar stars=svg.selectAll(\".star\").data(data).enter().append(\"path\").attr(\"class\",\"star\").attr(\"d\",star)// use the star generator to create the shape\n.attr(\"transform\",function(d){return\"translate(\".concat(projection(d.coordinates),\")\");}).attr(\"fill\",\"red\").attr(\"stroke\",\"black\").attr(\"stroke-width\",\"1px\");svg.selectAll(\".city-label\").data(data).enter().append(\"text\").attr(\"class\",\"city-label\").style(\"visibility\",function(d){return d.city===\"Atlanta\"?\"visible\":\"hidden\";}).attr(\"x\",function(d){return projection(d.coordinates)[0]+40;}).attr(\"y\",function(d){return projection(d.coordinates)[1];}).text(function(d){return d.city;}).attr(\"font-size\",\"15px\").attr(\"font-weight\",\"bold\").attr(\"text-anchor\",\"middle\").attr(\"fill\",\"black\");svg.append(\"text\").attr(\"x\",width/2).attr(\"y\",height-10).style(\"text-anchor\",\"middle\").style(\"font-size\",\"18px\").style(\"font-weight\",\"bolder\").text(\"Chart7: The location of Atlanta\");},[data]);return/*#__PURE__*/_jsx(\"svg\",{ref:ref,style:{width:width,height:height}});}export default AtMap;","map":{"version":3,"names":["React","useEffect","useRef","d3","feature","us","jsx","_jsx","data","coutry","city","coordinates","AtMap","ref","width","height","svg","select","current","selectAll","remove","colorScale","scaleOrdinal","domain","range","projection","geoAlbersUsa","fitSize","objects","states","path","geoPath","append","features","join","attr","d","properties","name","star","symbol","type","symbolStar","size","stars","enter","concat","style","text"],"sources":["/Users/yinjia/Desktop/react-d3/d3-website/src/components/page5/AtMap.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { feature } from \"topojson-client\";\nimport us from \"../Data/usa-states-10m.json\";\n\nconst data = [\n  {\n    coutry: \"USA\",\n    city: \"Atlanta\",\n    coordinates: [-84.388, 33.749],\n  },\n];\n\nfunction AtMap() {\n  const ref = useRef();\n  const width = 900;\n  const height = 650;\n\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    svg.selectAll(\"*\").remove();\n\n    // Define a separate color scale for the states\n    const colorScale = d3\n      .scaleOrdinal()\n      .domain([\"Georgia\", \"Other\"])\n      .range([\"#FFD700\", \"#BDCDD6\"]);\n\n    const projection = d3\n      .geoAlbersUsa()\n      .fitSize([width, height], feature(us, us.objects.states));\n\n    const path = d3.geoPath().projection(projection);\n\n    svg\n      .append(\"g\")\n      .selectAll(\"path\")\n      .data(feature(us, us.objects.states).features)\n      .join(\"path\")\n      .attr(\"d\", path)\n      .attr(\"stroke\", \"#000\")\n      .attr(\"fill\", (d) => {\n        return d.properties.name === \"Georgia\"\n          ? colorScale(\"Georgia\")\n          : colorScale(\"Other\");\n      });\n\n    // Create a star symbol generator\n    const star = d3.symbol().type(d3.symbolStar).size(100);\n\n    // Add city points as star symbols\n    const stars = svg\n      .selectAll(\".star\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"star\")\n      .attr(\"d\", star) // use the star generator to create the shape\n      .attr(\"transform\", function (d) {\n        return `translate(${projection(d.coordinates)})`;\n      })\n      .attr(\"fill\", \"red\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", \"1px\");\n\n    svg\n      .selectAll(\".city-label\")\n      .data(data)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"city-label\")\n      .style(\"visibility\", (d) => (d.city === \"Atlanta\" ? \"visible\" : \"hidden\"))\n      .attr(\"x\", function (d) {\n        return projection(d.coordinates)[0] + 40;\n      })\n      .attr(\"y\", function (d) {\n        return projection(d.coordinates)[1];\n      })\n      .text(function (d) {\n        return d.city;\n      })\n      .attr(\"font-size\", \"15px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"fill\", \"black\");\n\n    svg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", height - 10)\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"18px\")\n      .style(\"font-weight\", \"bolder\")\n      .text(\"Chart7: The location of Atlanta\");\n  }, [data]);\n\n  return <svg ref={ref} style={{ width: width, height: height }} />;\n}\n\nexport default AtMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}